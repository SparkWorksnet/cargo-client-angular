/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { UnitCreateDTO } from '../model/unitCreateDTO';
import { UnitDTO } from '../model/unitDTO';
import { UnitQueryDTO } from '../model/unitQueryDTO';
import { UnitUpdateDTO } from '../model/unitUpdateDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class UnitService {

    protected basePath = 'https://api.sparkworks.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a Unit
     * A Spark Works Accounts authenticated user is able to create a Unit.
     * @param unitCreateDTO Unit Creation API Model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUnit(unitCreateDTO: UnitCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    public createUnit(unitCreateDTO: UnitCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    public createUnit(unitCreateDTO: UnitCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    public createUnit(unitCreateDTO: UnitCreateDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (unitCreateDTO === null || unitCreateDTO === undefined) {
            throw new Error('Required parameter unitCreateDTO was null or undefined when calling createUnit.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UnitDTO>(`${this.basePath}/v2/unit`,
            unitCreateDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Unit by its UUID
     * A Spark Works Accounts authenticated user is able to delete a Unit by its UUID.
     * @param uuid The Unit UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUnit(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUnit(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUnit(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUnit(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling deleteUnit.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v2/unit/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a collection of Units
     * A Spark Works Accounts authenticated user is able to retrieve all of the Platform Units.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUnits(observe?: 'body', reportProgress?: boolean): Observable<Array<UnitDTO>>;
    public getAllUnits(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UnitDTO>>>;
    public getAllUnits(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UnitDTO>>>;
    public getAllUnits(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UnitDTO>>(`${this.basePath}/v2/unit`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Unit by its UUID
     * A Spark Works Accounts authenticated common user is able to retrieve a Unit that has permissions on by its UUID. An administrator is able to get any Unit by its UUID.
     * @param uuid The Unit UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUnitByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    public getUnitByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    public getUnitByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    public getUnitByUuid(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getUnitByUuid.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UnitDTO>(`${this.basePath}/v2/unit/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Unit by a query
     * A Spark Works Accounts authenticated user is able to retrieve a Unit.
     * @param unitQueryDTO Unit Query API Model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryUnits(unitQueryDTO: UnitQueryDTO, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    public queryUnits(unitQueryDTO: UnitQueryDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    public queryUnits(unitQueryDTO: UnitQueryDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    public queryUnits(unitQueryDTO: UnitQueryDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (unitQueryDTO === null || unitQueryDTO === undefined) {
            throw new Error('Required parameter unitQueryDTO was null or undefined when calling queryUnits.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UnitDTO>(`${this.basePath}/v2/unit/query`,
            unitQueryDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Unit
     * A Spark Works Accounts administrator is able to update a Unit by its UUID.
     * @param uuid The Unit UUID
     * @param updateDTO updateDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUnit(uuid: string, updateDTO: UnitUpdateDTO, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    public updateUnit(uuid: string, updateDTO: UnitUpdateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    public updateUnit(uuid: string, updateDTO: UnitUpdateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    public updateUnit(uuid: string, updateDTO: UnitUpdateDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling updateUnit.');
        }

        if (updateDTO === null || updateDTO === undefined) {
            throw new Error('Required parameter updateDTO was null or undefined when calling updateUnit.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UnitDTO>(`${this.basePath}/v2/unit/${encodeURIComponent(String(uuid))}`,
            updateDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
