/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PublishDataListDTOAPIModel } from '../model/publishDataListDTOAPIModel';
import { QueryLatestResourceDataDTOAPIModel } from '../model/queryLatestResourceDataDTOAPIModel';
import { QueryLatestResourceDataResultDTOAPIModel } from '../model/queryLatestResourceDataResultDTOAPIModel';
import { QueryRawDataTimeRangeDTOAPIModel } from '../model/queryRawDataTimeRangeDTOAPIModel';
import { QueryRawDataTimeRangeResultDTOAPIModel } from '../model/queryRawDataTimeRangeResultDTOAPIModel';
import { QueryResourceDataCriteriaDTOAPIModel } from '../model/queryResourceDataCriteriaDTOAPIModel';
import { QueryTimeRangeResourceDataDTOAPIModel } from '../model/queryTimeRangeResourceDataDTOAPIModel';
import { QueryTimeRangeResourceDataResultDTOAPIModel } from '../model/queryTimeRangeResourceDataResultDTOAPIModel';
import { ResourceLatestValuesResponseAPIModel } from '../model/resourceLatestValuesResponseAPIModel';
import { TheResourceSummaryDataAPIModel } from '../model/theResourceSummaryDataAPIModel';
import { Configuration } from '../configuration';
export declare class DataService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Retrieve latest values and analytics for a single Resource
     * Retrieve the latest values received for a single Resource. The response contains the latest value received for the Resource, the timestamp of the measurement as well as the analytics calculated for this measurement for the last 5minute, hour, day and month interval.
     * @param uuid The UUID of the Resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLatestByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceLatestValuesResponseAPIModel>;
    getLatestByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceLatestValuesResponseAPIModel>>;
    getLatestByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceLatestValuesResponseAPIModel>>;
    /**
     * Retrieve the data summary for a single Resource
     * Retrieve a summary of the latest analytics calculated for a single Resource. The summary contains the latest calculated analytics for the Resource for the past 48 5minute, hour, day and month intervals.
     * @param uuid The UUID of the Resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSummaryByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<TheResourceSummaryDataAPIModel>;
    getSummaryByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TheResourceSummaryDataAPIModel>>;
    getSummaryByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TheResourceSummaryDataAPIModel>>;
    /**
     * Publish data to a single or multiple Resources
     * Publish data to a single or multiple Resources. Send data for processing for one or more Resources that you have permission to update.
     * @param body Data to be published
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    publishData(body?: PublishDataListDTOAPIModel, observe?: 'body', reportProgress?: boolean): Observable<PublishDataListDTOAPIModel>;
    publishData(body?: PublishDataListDTOAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PublishDataListDTOAPIModel>>;
    publishData(body?: PublishDataListDTOAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PublishDataListDTOAPIModel>>;
    /**
     * Retrieve the latest values received for multiple Resources
     * Retrieve the latest values received for multiple Resources. The response contains the latest value received for the Resource and the timestamp of the measurement. For more information on how to define the criteria check the method parameters.
     * @param body Data query criteria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryLatest(body: QueryLatestResourceDataDTOAPIModel, observe?: 'body', reportProgress?: boolean): Observable<QueryLatestResourceDataResultDTOAPIModel>;
    queryLatest(body: QueryLatestResourceDataDTOAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueryLatestResourceDataResultDTOAPIModel>>;
    queryLatest(body: QueryLatestResourceDataDTOAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueryLatestResourceDataResultDTOAPIModel>>;
    /**
     * Retrieve the data summaries of mutliple Resource
     * Retrieve the data summaries received of multiple Resources. The response contains the summary with calculated analytics for each Resource for the past 48 5minute, hour, day and month intervals. A single summary is returned for each Resource
     * @param body Data query criteria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    querySummary(body: QueryResourceDataCriteriaDTOAPIModel, observe?: 'body', reportProgress?: boolean): Observable<TheResourceSummaryDataAPIModel>;
    querySummary(body: QueryResourceDataCriteriaDTOAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TheResourceSummaryDataAPIModel>>;
    querySummary(body: QueryResourceDataCriteriaDTOAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TheResourceSummaryDataAPIModel>>;
    /**
     * Retrieve analytics for a single Resource
     * Retrieve analytics for a single Resource on multiple intervals and granularities. The response contains the latest calculated analytics for the Resource based on the query criteria provided with the request. For more information on how to define the criteria check the method parameters.
     * @param body Timerange criteria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryTimeRange(body: QueryTimeRangeResourceDataDTOAPIModel, observe?: 'body', reportProgress?: boolean): Observable<QueryTimeRangeResourceDataResultDTOAPIModel>;
    queryTimeRange(body: QueryTimeRangeResourceDataDTOAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueryTimeRangeResourceDataResultDTOAPIModel>>;
    queryTimeRange(body: QueryTimeRangeResourceDataDTOAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueryTimeRangeResourceDataResultDTOAPIModel>>;
    /**
     * Retrieve the raw data received for a single Resource
     * Retrieve the raw data received for a single Resource over a specified time interval. This method retrieves from the raw data storage and depending on the amount of data that need to be accessed may take longer time to respond. If your get a response timeout you may need to limit the requested time range.
     * @param body Raw Data Timerange Criteria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryTimeRangeRaw(body: QueryRawDataTimeRangeDTOAPIModel, observe?: 'body', reportProgress?: boolean): Observable<QueryRawDataTimeRangeResultDTOAPIModel>;
    queryTimeRangeRaw(body: QueryRawDataTimeRangeDTOAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueryRawDataTimeRangeResultDTOAPIModel>>;
    queryTimeRangeRaw(body: QueryRawDataTimeRangeDTOAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueryRawDataTimeRangeResultDTOAPIModel>>;
}
