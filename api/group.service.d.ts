/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GatewayDTO } from '../model/gatewayDTO';
import { GroupCreateDTO } from '../model/groupCreateDTO';
import { GroupDTO } from '../model/groupDTO';
import { GroupUpdateDTO } from '../model/groupUpdateDTO';
import { ResourceDTO } from '../model/resourceDTO';
import { Configuration } from '../configuration';
export declare class GroupService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Count Groups
     * A Spark Works Accounts authenticated common user is able to retrieve the number of Groups that has permissions on. An administrator is able to retrieve the number of all Groups.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    countGroups(observe?: 'body', reportProgress?: boolean): Observable<number>;
    countGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    countGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     * Create a new Group
     * A Spark Works authenticated user is able to request a new Group creation
     * @param body Group Creation API Model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createGroup(body: GroupCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<GroupDTO>;
    createGroup(body: GroupCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupDTO>>;
    createGroup(body: GroupCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupDTO>>;
    /**
     * Delete Group branch by the Group UUID
     * A Spark Works Accounts authenticated common user is able to remove a Spark Works Group branch that has permissions on by its UUID. An administrator is able to remove any Group branch of the platform
     * @param uuid The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteGroupBranch(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteGroupBranch(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteGroupBranch(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Retrieve a collection of Groups
     * A Spark Works Accounts authenticated common user is able to retrieve all of the Platform Groups that has permissions on. An administrator is able to query all of the platform Groups
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<GroupDTO>>;
    getAllGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GroupDTO>>>;
    getAllGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GroupDTO>>>;
    /**
     * Retrieve a Group by its UUID
     * A Spark Works Accounts authenticated common user is able to retrieve a Group that has permissions on by its UUID. An administrator is able to get any Group by its UUID.
     * @param uuid The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getGroupByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<GroupDTO>;
    getGroupByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupDTO>>;
    getGroupByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupDTO>>;
    /**
     * Get the Gateways of a Group by the Group UUID
     * A Spark Works Accounts authenticated common user is able to retrieve the Gateways of Group that has permissions on by its UUID. An administrator is able to retrieve the Gateways of any Group.
     * @param uuid The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getGroupGateways(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GatewayDTO>>;
    getGroupGateways(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GatewayDTO>>>;
    getGroupGateways(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GatewayDTO>>>;
    /**
     * Get the Resources of a Group by the Group UUID
     * A Spark Works Accounts authenticated common user is able to retrieve the Resources of Group that has permissions on by its UUID. An administrator is able to retrieve the Resources of any Group.
     * @param uuid The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getGroupResources(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ResourceDTO>>;
    getGroupResources(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ResourceDTO>>>;
    getGroupResources(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ResourceDTO>>>;
    /**
     * List the main level Groups
     * A Spark Works Accounts authenticated common user is able to list the Groups of main level that has permissions on. An administrator is able to list all the Groups of main level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getMainLevelGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<GroupDTO>>;
    getMainLevelGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GroupDTO>>>;
    getMainLevelGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GroupDTO>>>;
    /**
     * Get the Subgroups of a Group by the Group UUID
     * A Spark Works Accounts authenticated common user is able to retrieve the Subgroups of Group that has permissions on by its UUID. An administrator is able to retrieve the Subgroups of any Group.
     * @param uuid The Group UUID
     * @param depth depth
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSubgroups(uuid: string, depth: number, observe?: 'body', reportProgress?: boolean): Observable<Array<GroupDTO>>;
    getSubgroups(uuid: string, depth: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GroupDTO>>>;
    getSubgroups(uuid: string, depth: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GroupDTO>>>;
    /**
     * Move Group Branch
     * A Spark Works Accounts authenticated common user is able to move a Spark Works Group branch that has permissions on under another Group that has permissions on. An administrator is able to move any Group of the platform under any other Group
     * @param sourceUUID The source Group UUID
     * @param targetUUID The target Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    moveGroupBranch(sourceUUID: string, targetUUID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    moveGroupBranch(sourceUUID: string, targetUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    moveGroupBranch(sourceUUID: string, targetUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Update Group
     * A Spark Works Accounts authenticated common user is able to update a Group&#x27;s values that has permission on. An administrator is able to update the values of any Group.
     * @param body groupUpdateDTO
     * @param uuid The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateGroup(body: GroupUpdateDTO, uuid: string, observe?: 'body', reportProgress?: boolean): Observable<GroupDTO>;
    updateGroup(body: GroupUpdateDTO, uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupDTO>>;
    updateGroup(body: GroupUpdateDTO, uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupDTO>>;
}
