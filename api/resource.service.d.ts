/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ResourceCreateDTO } from '../model/resourceCreateDTO';
import { ResourceDTO } from '../model/resourceDTO';
import { ResourceQueryDTO } from '../model/resourceQueryDTO';
import { ResourceUpdateDTO } from '../model/resourceUpdateDTO';
import { Configuration } from '../configuration';
export declare class ResourceService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Count Resources
     * A Spark Works Accounts authenticated common user is able to retrieve the number of Resources that has permissions on. An administrator is able to retrieve the number of all Resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    countResources(observe?: 'body', reportProgress?: boolean): Observable<number>;
    countResources(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    countResources(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     * Create a new Resource
     * A Spark Works authenticated user is able to request a new Resource creation
     * @param body Resource Creation API Model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createResource(body: ResourceCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<ResourceDTO>;
    createResource(body: ResourceCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDTO>>;
    createResource(body: ResourceCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDTO>>;
    /**
     * Delete Resource by its UUID
     * A Spark Works Accounts authenticated common user is able to remove a Spark Works Resource that has permissions on by its unique identifier. An administrator is able to remove any Resource of the platform
     * @param uuid The Resource UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteResource(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteResource(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteResource(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Retrieve a Spark Works Resource by its UUID
     * A Spark Works Accounts authenticated common user is able to retrieve a Resource, that has permissions on, by its UUID. An administrator is able to retrieve any Resource of the platform
     * @param uuid The Resource UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getResourceByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDTO>;
    getResourceByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDTO>>;
    getResourceByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDTO>>;
    /**
     * Retrieve a collection of Resources
     * A Spark Works Accounts authenticated common user is able to retrieve all of the Platform resources that the user has permissions on. An administrator is able to query all of the platform resources
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getResources(observe?: 'body', reportProgress?: boolean): Observable<Array<ResourceDTO>>;
    getResources(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ResourceDTO>>>;
    getResources(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ResourceDTO>>>;
    /**
     * Move Resource by its UUID
     * A Spark Works Accounts authenticated common user is able to move a Spark Works Resource that has permissions on by its unique identifierto a Spark Works Group that has permissions on. An administrator is able to move any Resource of the platform
     * @param uuid The Resource UUID
     * @param targetUUID The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    moveResource(uuid: string, targetUUID: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDTO>;
    moveResource(uuid: string, targetUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDTO>>;
    moveResource(uuid: string, targetUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDTO>>;
    /**
     * Retrieve a Resource by a query
     * A Spark Works Accounts authenticated common user is able to retrieve a Resource that has permissions on by a query object. An administrator is able to get any Resource by a query object.
     * @param body The Resource Query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryResources(body: ResourceQueryDTO, observe?: 'body', reportProgress?: boolean): Observable<ResourceDTO>;
    queryResources(body: ResourceQueryDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDTO>>;
    queryResources(body: ResourceQueryDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDTO>>;
    /**
     * Update Resource
     * A Spark Works Accounts authenticated common user is able to update a Resource&#x27;s values that has permission on. An administrator is able to update the values of any Resource.
     * @param body resourceUpdateDTO
     * @param uuid The Group UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateResource(body: ResourceUpdateDTO, uuid: string, observe?: 'body', reportProgress?: boolean): Observable<ResourceDTO>;
    updateResource(body: ResourceUpdateDTO, uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDTO>>;
    updateResource(body: ResourceUpdateDTO, uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDTO>>;
}
