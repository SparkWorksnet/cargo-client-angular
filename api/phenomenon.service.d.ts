/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PhenomenonCreateDTO } from '../model/phenomenonCreateDTO';
import { PhenomenonDTO } from '../model/phenomenonDTO';
import { PhenomenonQueryDTO } from '../model/phenomenonQueryDTO';
import { PhenomenonUpdateDTO } from '../model/phenomenonUpdateDTO';
import { Configuration } from '../configuration';
export declare class PhenomenonService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create a Phenomenon
     * A Spark Works Accounts authenticated user is able to create a Phenomenon.
     * @param body The Phenomenon Query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createPhenomenon(body: PhenomenonCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
    createPhenomenon(body: PhenomenonCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
    createPhenomenon(body: PhenomenonCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
    /**
     * Delete a Phenomenon by its UUID
     * A Spark Works Accounts authenticated user is able to delete a Phenomenon by its UUID.
     * @param uuid The Phenomenon UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePhenomenon(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deletePhenomenon(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deletePhenomenon(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Retrieve a collection of Phenomenons
     * A Spark Works Accounts authenticated user is able to retrieve all of the Platform Phenomenons.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllPhenomena(observe?: 'body', reportProgress?: boolean): Observable<Array<PhenomenonDTO>>;
    getAllPhenomena(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PhenomenonDTO>>>;
    getAllPhenomena(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PhenomenonDTO>>>;
    /**
     * Retrieve a Phenomenon by its UUID
     * A Spark Works Accounts authenticated common user is able to retrieve a Phenomenon that has permissions on by its UUID. An administrator is able to get any Phenomenon by its UUID.
     * @param uuid The Phenomenon UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPhenomenonByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
    getPhenomenonByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
    getPhenomenonByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
    /**
     * Retrieve a Phenomenon by a query
     * A Spark Works Accounts authenticated user is able to retrieve a Phenomenon.
     * @param body The Phenomenon Query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryPhenomena(body: PhenomenonQueryDTO, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
    queryPhenomena(body: PhenomenonQueryDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
    queryPhenomena(body: PhenomenonQueryDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
    /**
     * Update Phenomenon
     * A Spark Works Accounts administrator is able to update a Phenomenon by its UUID.
     * @param body updateDTO
     * @param uuid The Phenomenon UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
    updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
    updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
}
