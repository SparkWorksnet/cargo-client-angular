/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AParticipatorySensingResourceRequestAPIModel } from '../model/aParticipatorySensingResourceRequestAPIModel';
import { PublishDataListDTOAPIModel } from '../model/publishDataListDTOAPIModel';
import { ResourceDTO } from '../model/resourceDTO';
import { Configuration } from '../configuration';
export declare class ParticipatorySensingService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create a Participatory Sensing Resource with an autogenerated uri
     * Provides means to create a participatory sensing resource and setup its properties in one call, with an autogenerated uri for it
     * @param body Resource to be created and used for participatory sensing.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createPsResource(body: AParticipatorySensingResourceRequestAPIModel, observe?: 'body', reportProgress?: boolean): Observable<ResourceDTO>;
    createPsResource(body: AParticipatorySensingResourceRequestAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResourceDTO>>;
    createPsResource(body: AParticipatorySensingResourceRequestAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResourceDTO>>;
    /**
     * Delete a Participatory Sensing Resource
     * Provides means to delete a participatory sensing resource
     * @param uuid The Participatory Sensing Resource UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePsResource(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deletePsResource(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deletePsResource(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Publish data to a Participatory Sensing Resource.
     * Provides means to publish data to a participatory sensing resource.
     * @param body List of PublishDataDTO to be published to a participatory sensing resource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    publishPsData(body: PublishDataListDTOAPIModel, observe?: 'body', reportProgress?: boolean): Observable<PublishDataListDTOAPIModel>;
    publishPsData(body: PublishDataListDTOAPIModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PublishDataListDTOAPIModel>>;
    publishPsData(body: PublishDataListDTOAPIModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PublishDataListDTOAPIModel>>;
}
