/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {PhenomenonCreateDTO} from '../model/phenomenonCreateDTO';
import {PhenomenonDTO} from '../model/phenomenonDTO';
import {PhenomenonQueryDTO} from '../model/phenomenonQueryDTO';
import {PhenomenonUpdateDTO} from '../model/phenomenonUpdateDTO';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class PhenomenonService {

  protected basePath = '//api.sparkworks.net/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Create a Phenomenon
   * A Spark Works Accounts authenticated user is able to create a Phenomenon.
   * @param body The Phenomenon Query
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createPhenomenon(body: PhenomenonCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
  public createPhenomenon(body: PhenomenonCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
  public createPhenomenon(body: PhenomenonCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
  public createPhenomenon(body: PhenomenonCreateDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createPhenomenon.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PhenomenonDTO>(`${this.basePath}/v2/phenomenon`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Delete a Phenomenon by its UUID
   * A Spark Works Accounts authenticated user is able to delete a Phenomenon by its UUID.
   * @param uuid The Phenomenon UUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deletePhenomenon(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deletePhenomenon(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deletePhenomenon(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deletePhenomenon(uuid: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (uuid === null || uuid === undefined) {
      throw new Error('Required parameter uuid was null or undefined when calling deletePhenomenon.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<any>(`${this.basePath}/v2/phenomenon/${encodeURIComponent(String(uuid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve a collection of Phenomenons
   * A Spark Works Accounts authenticated user is able to retrieve all of the Platform Phenomenons.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllPhenomena(observe?: 'body', reportProgress?: boolean): Observable<Array<PhenomenonDTO>>;
  public getAllPhenomena(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PhenomenonDTO>>>;
  public getAllPhenomena(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PhenomenonDTO>>>;
  public getAllPhenomena(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<PhenomenonDTO>>(`${this.basePath}/v2/phenomenon`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve a Phenomenon by its UUID
   * A Spark Works Accounts authenticated common user is able to retrieve a Phenomenon that has permissions on by its UUID. An administrator is able to get any Phenomenon by its UUID.
   * @param uuid The Phenomenon UUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPhenomenonByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
  public getPhenomenonByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
  public getPhenomenonByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
  public getPhenomenonByUuid(uuid: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (uuid === null || uuid === undefined) {
      throw new Error('Required parameter uuid was null or undefined when calling getPhenomenonByUuid.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PhenomenonDTO>(`${this.basePath}/v2/phenomenon/${encodeURIComponent(String(uuid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Retrieve a Phenomenon by a query
   * A Spark Works Accounts authenticated user is able to retrieve a Phenomenon.
   * @param body The Phenomenon Query
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public queryPhenomena(body: PhenomenonQueryDTO, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
  public queryPhenomena(body: PhenomenonQueryDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
  public queryPhenomena(body: PhenomenonQueryDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
  public queryPhenomena(body: PhenomenonQueryDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling queryPhenomena.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PhenomenonDTO>(`${this.basePath}/v2/phenomenon/query`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update Phenomenon
   * A Spark Works Accounts administrator is able to update a Phenomenon by its UUID.
   * @param body updateDTO
   * @param uuid The Phenomenon UUID
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe?: 'body', reportProgress?: boolean): Observable<PhenomenonDTO>;
  public updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PhenomenonDTO>>;
  public updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PhenomenonDTO>>;
  public updatePhenomenon(body: PhenomenonUpdateDTO, uuid: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updatePhenomenon.');
    }

    if (uuid === null || uuid === undefined) {
      throw new Error('Required parameter uuid was null or undefined when calling updatePhenomenon.');
    }

    let headers = this.defaultHeaders;

    // authentication (oauth2) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PhenomenonDTO>(`${this.basePath}/v2/phenomenon/${encodeURIComponent(String(uuid))}`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
