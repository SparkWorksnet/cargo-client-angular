/**
 * SparkWorks Core API
 * Management Service for the SparkWorks Processing Engine
 *
 * OpenAPI spec version: v2.0
 * Contact: info@sparkworks.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UnitCreateDTO } from '../model/unitCreateDTO';
import { UnitDTO } from '../model/unitDTO';
import { UnitQueryDTO } from '../model/unitQueryDTO';
import { UnitUpdateDTO } from '../model/unitUpdateDTO';
import { Configuration } from '../configuration';
export declare class UnitService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create a Unit
     * A Spark Works Accounts authenticated user is able to create a Unit.
     * @param body Unit Creation API Model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createUnit(body: UnitCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    createUnit(body: UnitCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    createUnit(body: UnitCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    /**
     * Delete a Unit by its UUID
     * A Spark Works Accounts authenticated user is able to delete a Unit by its UUID.
     * @param uuid The Unit UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteUnit(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteUnit(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteUnit(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Retrieve a collection of Units
     * A Spark Works Accounts authenticated user is able to retrieve all of the Platform Units.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllUnits(observe?: 'body', reportProgress?: boolean): Observable<Array<UnitDTO>>;
    getAllUnits(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UnitDTO>>>;
    getAllUnits(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UnitDTO>>>;
    /**
     * Retrieve a Unit by its UUID
     * A Spark Works Accounts authenticated common user is able to retrieve a Unit that has permissions on by its UUID. An administrator is able to get any Unit by its UUID.
     * @param uuid The Unit UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUnitByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    getUnitByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    getUnitByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    /**
     * Retrieve a Unit by a query
     * A Spark Works Accounts authenticated user is able to retrieve a Unit.
     * @param body Unit Query API Model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryUnits(body: UnitQueryDTO, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    queryUnits(body: UnitQueryDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    queryUnits(body: UnitQueryDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
    /**
     * Update Unit
     * A Spark Works Accounts administrator is able to update a Unit by its UUID.
     * @param body updateDTO
     * @param uuid The Unit UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUnit(body: UnitUpdateDTO, uuid: string, observe?: 'body', reportProgress?: boolean): Observable<UnitDTO>;
    updateUnit(body: UnitUpdateDTO, uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UnitDTO>>;
    updateUnit(body: UnitUpdateDTO, uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UnitDTO>>;
}
